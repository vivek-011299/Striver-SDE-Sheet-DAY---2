/*
*
Given an array of integers. Find the Inversion Count in the array. 

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If array is already sorted then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum. 
Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.
*
*/


Solution :-

 long long int merge(long long arr[],long long int l,long long int mid,long long int h)
    {
        long long int count=0;
        long long int i=l;
        long long int j=mid;
        long long int k=l;
        long long int brr[h+1];
        while(i<mid && j<=h)
        {
            if(arr[i]<=arr[j])
            {
                brr[k++]=arr[i++];
            }
            else 
            {
                brr[k++]=arr[j++];
                count=count+(mid-i);                                          // Only change in merge function in implementation of merge sort is this line.
            }
        }
        while(i<mid)
        {
            brr[k++]=arr[i++];
        }
        while(j<=h)
        {
             brr[k++]=arr[j++];
        }
        for(long long int i=l;i<=h;i++)
        {
            arr[i]=brr[i];
        }
        return count;
    }
    long long int merge_sort(long long arr[],long long int low,long long int high)
    {
        long long int ans=0;
        if(low<high)
        {
            int mid = (low+high)/2;
           ans+= merge_sort(arr,low,mid);
            ans+=merge_sort(arr,mid+1,high);
            ans+=merge(arr,low,mid+1,high);
        }
        return ans;
    }
    long long int inversionCount(long long arr[], long long N)
    {
        long long int ans;
       ans= merge_sort(arr,0,N-1);
        return ans;
    }
